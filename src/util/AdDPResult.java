package util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import org.apache.commons.math3.util.CombinatoricsUtils;

/**
 * compute the final Ad from the Dynamic Programming result, which is generated by Ad.java
 */
public class AdDPResult {
    public static ArrayList<ArrayList<Tuple>>[] F_Nd_;//F_Nd_[]=F_[Nd][]
    public static int[] listPhraseSize;
    public static int K;

    private static HashMap<Integer,Integer> turnListToMap(ArrayList<Tuple> list){
        HashMap<Integer,Integer> dict=new HashMap<Integer, Integer>();
        if(list.size()>0){
            for(Tuple t: list){
                int phraseId=t.getPhraseId();
                int numTopicAssignedAsPhrase=t.getNumTopicAssignedAsPhrase();
                dict.put(phraseId,numTopicAssignedAsPhrase);
            }
        }
        return dict;
    }

    /**
     * firstPart=\prod_{i=1}^{N^{(\mathcal{P})}_d} ({K\choose{1}} {|l(d,i)|\choose{m_i}} (K-1)^{|l(d,i)|-m_i})
     * secondPart=\exp(\sum_{i=1}^{N^{(\mathcal{P})}_d}\frac{m_i}{l(d,i)}  )
     * result=firstPart*secondPart
     * @param list
     * @return
     */
    private static double computeForList(ArrayList<Tuple> list){
        double result=0;

        double firstPart=1;
        double exponentInSecondPart=0;

        HashMap<Integer,Integer> dict=turnListToMap(list);
        for(int i=0;i<listPhraseSize.length;i++){
            int numTopicAssignedAsPhrase=-1;
            if(dict.containsKey(i)){
                numTopicAssignedAsPhrase=dict.get(i);
            }else{
                numTopicAssignedAsPhrase=0;
            }
            firstPart=firstPart*K*CombinatoricsUtils.binomialCoefficient(listPhraseSize[i],numTopicAssignedAsPhrase)
                        *Math.pow(K-1,listPhraseSize[i]-numTopicAssignedAsPhrase);
            exponentInSecondPart=exponentInSecondPart+(double)numTopicAssignedAsPhrase/(double)listPhraseSize[i];
        }
        double secondPart=Math.exp(exponentInSecondPart);
        result=firstPart*secondPart;
        return result;
    }

    public static double getFinalResult(int _K,int[] _listPhraseSize,ArrayList<ArrayList<Tuple>>[][] F_){
        K=_K;
        listPhraseSize=_listPhraseSize;

        F_Nd_=F_[listPhraseSize.length-1];

        double Ad=0;
        for(int x=0;x<F_Nd_.length;x++){
            for(ArrayList<Tuple> list: F_Nd_[x]){
                Ad=Ad+computeForList(list);
//                System.out.println(computeForList(list));
            }
        }
        return Ad;
    }
}
